<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET Modernization Workshop</title>
    <link>/en/</link>
    <description>Recent content on ASP.NET Modernization Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 10 Oct 2019 10:57:53 -0400</lastBuildDate>
    
	<atom:link href="/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Who this Workshop is For</title>
      <link>/en/10-intro/05-target-audience.html</link>
      <pubDate>Sat, 12 Oct 2019 17:36:04 -0400</pubDate>
      
      <guid>/en/10-intro/05-target-audience.html</guid>
      <description>Anyone comfortable with Visual Studio or Jetbrains Rider is going to have easy time with this workshop. Proficiency with C# is quite important and familiarity with Amazon Web Services is beneficial too.
This is level 300-400 (intermediate to advanced) workshop, so please do not assume &amp;ldquo;Hello, World&amp;rdquo; simplicity.
.NET developers, especially those writing web applications, are those who will benefit most from using this workshop. You don&amp;rsquo;t have to be seasoned engineer though to learn and enjoy from this content: even an intermediate or an ambitious beginner should have no trouble working through the most labs.</description>
    </item>
    
    <item>
      <title>CDK Module Overview</title>
      <link>/en/20-cdk/10-overview.html</link>
      <pubDate>Sat, 12 Oct 2019 18:06:59 -0400</pubDate>
      
      <guid>/en/20-cdk/10-overview.html</guid>
      <description>Welcome to the .NET AWS CDK module of the workshop! &amp;ldquo;CDK&amp;rdquo; stands for Cloud Development Kit.
Workshop Goals The goal of this lab is to guide participants through adding support for MySQL database to both ASP.NET application codebase, and to the existing infra-as-code C# CDK projects defining cloud CI/CD pipeline and cloud application deployment environment.
This workshop skips the &amp;ldquo;Hello, World&amp;rdquo; CDK project creation, and instead focuses on somewhat more in-depth capabilities of the CDK, showing higher-fidelity code samples implementing closer-to-real-life scenarios.</description>
    </item>
    
    <item>
      <title>What&#39;s Inside</title>
      <link>/en/10-intro/10-overview.html</link>
      <pubDate>Fri, 11 Oct 2019 17:38:34 -0400</pubDate>
      
      <guid>/en/10-intro/10-overview.html</guid>
      <description>ASP.NET Application The foundation of every module here is an ASP.NET Core Unicorn Store web application that has an MVC/Razor UI and MVC Controllers implementing business logic and data access layers. Unicorn Store application is based on an established ASP.NET Music Store sample and thus should be fairly familiar to many participants.
Data Access components of the application are written using code-first style, enabling easy switching of the DAL from using SQL Server to other RDBMS, including open-source databases like MySQL and PostgreSQL.</description>
    </item>
    
    <item>
      <title>Setting Up Dev Environment</title>
      <link>/en/20-cdk/20-setting-up.html</link>
      <pubDate>Sun, 13 Oct 2019 14:29:41 -0400</pubDate>
      
      <guid>/en/20-cdk/20-setting-up.html</guid>
      <description>You may skip this page and move on to the next step and you are using Amazon-supplied VM image (AMI) at an Amazon event, with all tools installed and pre-configured.
Pre-Requisites  Either MS SQL Server (LocalDB version is perfectly suitable), or PostgreSQL, per Common Prerequisites. MySQL is required as the goal of the module is to add MySQL support to the app. MySQL Workbench, a MySQL management UI console, is recommended.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>/en/10-intro/20-prerequisites.html</link>
      <pubDate>Fri, 11 Oct 2019 17:39:00 -0400</pubDate>
      
      <guid>/en/10-intro/20-prerequisites.html</guid>
      <description>To successfully execute any module of this workshop, following common requirements need to be fulfilled, in addition to any module-specific requirements outlined in each module guide.
If you are taking this lab within the scope of an Amazon event, in many cases a remote VM with all necessary prerequisites will be made available for workshop participants.
 Note to non-Windows users: since most modules are based on .NET Core version of the application, Mac and Linux users should have no trouble executing most modules.</description>
    </item>
    
    <item>
      <title>Running App Locally</title>
      <link>/en/20-cdk/30-running-app-locally.html</link>
      <pubDate>Sun, 13 Oct 2019 21:19:51 -0400</pubDate>
      
      <guid>/en/20-cdk/30-running-app-locally.html</guid>
      <description>Starting Unicorn Store Web Application     Notes      Once you have prepared your development environment, the only thing remains is to ensure that UnicornStore.csproj is selected as a startup project, switch hosting from &amp;ldquo;IIS Express&amp;rdquo; to Console, as shown on the screenshot on the left, and start the application in the debug mode.    After debugging session has started, a command console window will open first with application console output in it, along with a web browser window, showing the home page of the Unicorn Store ASP.</description>
    </item>
    
    <item>
      <title>.NET Core Secret Manager</title>
      <link>/en/10-intro/30-dotnet-secrets.html</link>
      <pubDate>Sun, 13 Oct 2019 19:55:57 -0400</pubDate>
      
      <guid>/en/10-intro/30-dotnet-secrets.html</guid>
      <description>An important note on using .NET Core Secret Manager:
 This lab makes an extensive use of .NET Core Secret Manager on your development workstation to save database passwords and similar types of sensitive application configuration data that varies from one developer&amp;rsquo;s workstation to another. Please note that despite the name .NET Core Secret Manager is not secure! It does not encrypt or password-protect your sensitive data. .NET Secrets are just plain text JSON files stored in a well-known directory.</description>
    </item>
    
    <item>
      <title>Creating AWS CI/CD Pipeline</title>
      <link>/en/20-cdk/40-creating-ci-cd-pipeline.html</link>
      <pubDate>Mon, 14 Oct 2019 11:11:14 -0400</pubDate>
      
      <guid>/en/20-cdk/40-creating-ci-cd-pipeline.html</guid>
      <description>Before we dive into the code base of the Unicorn Store solution and start hacking it, let&amp;rsquo;s spend a few moments to create the CI/CD pipeline in AWS, as creating it takes a few minutes to complete, and while that is in progress, we&amp;rsquo;ll spend some time looking into the structure of project and getting familiar with CDK concepts.
    Notes      Again, please select either Posgres or SQL Server configuration from Solution&amp;rsquo;s Build Configuration drop-down in Visual Studio&amp;hellip;    &amp;hellip;and mark &amp;ldquo;CicdInfraAsCode&amp;rdquo; project as a startup project.</description>
    </item>
    
    <item>
      <title>Project Structure</title>
      <link>/en/20-cdk/50-project-structure.html</link>
      <pubDate>Mon, 14 Oct 2019 14:11:33 -0400</pubDate>
      
      <guid>/en/20-cdk/50-project-structure.html</guid>
      <description>Let&amp;rsquo;s use the few minutes that it takes for the application CI/CD pipeline infrastructure to build, to get familiar with the structure of the project.
    Notes      Solution contains one ASP.NET Core application project named UnicornStore, and three CDK-related projects: CdkLib - a C# class library project, containing reusable components shared between two executable CDK projects.    The first of executable CDK projects is CicdInfraAsCode - the project we ran at the previous step of the lab.</description>
    </item>
    
  </channel>
</rss>