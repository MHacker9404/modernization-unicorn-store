AWSTemplateFormatVersion: "2010-09-09"
Description: This template creates a VPC, Subnets, and an EC2 dev instance

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          Default: Tag Information
        Parameters:
          - TagName
          - TagValue
      -
        Label:
          Default: VPC Name
        Parameters:
          - VPCName
      -
        Label:
          Default: VPC Availability Zones
        Parameters:
          - AvailabilityZone1
          - AvailabilityZone2
          - AvailabilityZone3
      -
        Label:
          Default: CIDR Blocks
        Parameters:
          - VPCCIDRBlock
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR

Parameters:
  TagName:
    Type: String
    Description: Tag Id for resources, so as to accumulate all resources generated by this cloud formation
    Default: "WorkshopId"
  
  TagValue:
    Type: String
    Description: Tag Value for resources, so as to accumulate all resources generated by this cloud formation
    Default: ".NET CDK Workshop"

  VPCName:
    Type: String
    Description: VPC Name
    Default: "VPCForWorkshop"

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone 1
    #Default: !FindInMap [RegionMap, !Ref 'AWS::Region', AZ1]

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone 2
    #Default: !FindInMap [RegionMap, !Ref 'AWS::Region', AZ2]

  AvailabilityZone3:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone 3
    #Default: !FindInMap [RegionMap, !Ref 'AWS::Region', AZ3]

  VPCCIDRBlock:
    Type: String
    Description: VPC CIDR Block
    Default: "10.0.0.0/16"

  PublicSubnet1CIDR:
    Type: String
    Description: Public Subnet 1 CIDR Block
    Default: "10.0.1.0/24"

  PublicSubnet2CIDR:
    Type: String
    Description: Public Subnet 2 CIDR Block
    Default: "10.0.2.0/24"

  PublicSubnet3CIDR:
    Type: String
    Description: Public Subnet 3 CIDR Block
    Default: "10.0.3.0/24"

  PrivateSubnet1CIDR:
    Type: String
    Description: Private Subnet 1 CIDR Block
    Default: "10.0.11.0/24"

  PrivateSubnet2CIDR:
    Type: String
    Description: Private Subnet 2 CIDR Block
    Default: "10.0.12.0/24"

  PrivateSubnet3CIDR:
    Type: String
    Description: Private Subnet 3 CIDR Block
    Default: "10.0.13.0/24"

Mappings:
  RegionMap:
    us-east-1:
      AmiId: ami-012a4b65e41ebd666
      AZ1: us-east-1a
      AZ2: us-east-1b
      AZ3: us-east-1c
    us-west-2:
      AmiId: ami-014fe7a162bf3ffd3
      AZ1: us-west-2a
      AZ2: us-west-2b
      AZ3: us-west-2c

Resources:
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  DefaultVPCIGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  IGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: DefaultVPCIGW

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: DefaultVPC
      InternetGatewayId:
        Ref: DefaultVPCIGW

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: DefaultVPC
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: DefaultVPC
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  DefaultNATGW:
    DependsOn: AttachIGW
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - DefaultNATGWNATGWEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  DefaultNATGWNATGWEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: DefaultNATGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DefaultVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone:
        Ref: AvailabilityZone1
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DefaultVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone:
        Ref: AvailabilityZone2
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DefaultVPC
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone:
        Ref: AvailabilityZone3
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PublicSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DefaultVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone:
        Ref: AvailabilityZone1
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DefaultVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone:
        Ref: AvailabilityZone2
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: DefaultVPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone:
        Ref: AvailabilityZone3
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue

  PrivateSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  FlowLogLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: VpcFlowAll

  FlowLogCWLPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
            Resource: !GetAtt FlowLogLogGroup.Arn

  FlowLogCWLRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - !Ref FlowLogCWLPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  DefaultFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogCWLRole.Arn
      LogGroupName:
        Ref: FlowLogLogGroup
      ResourceId:
        Ref: DefaultVPC
      ResourceType: VPC
      TrafficType: ALL

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow rdp to client host
      VpcId:
        Ref: DefaultVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3389
        ToPort: 3389
        CidrIp: 0.0.0.0/0

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: InstanceRole

  InstanceMachine:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.xlarge
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AmiId
      IamInstanceProfile:
        Ref: InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          GroupSet: 
          - !Ref InstanceSecurityGroup
          SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: !Ref TagName
        Value: !Ref TagValue